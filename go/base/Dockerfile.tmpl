ARG DEBIAN_VERSION
FROM debian:${DEBIAN_VERSION}

ARG DEBIAN_VERSION
# Replace sources.list in order to use archive.debian.org.
COPY sources-debian${DEBIAN_VERSION}.list /etc/apt/sources.list

RUN apt-get -o Acquire::Check-Valid-Until=false update -y --no-install-recommends --allow-unauthenticated \
        && apt-get upgrade -y --no-install-recommends --allow-unauthenticated \
        && apt-get dist-upgrade -y --no-install-recommends --allow-unauthenticated \
        && apt-get install -y --no-install-recommends --allow-unauthenticated \
            build-essential \
            ca-certificates \
            curl \
            git \
            gnupg \
            make \
            file \
            flex \
            bison \
{{- if or (eq .DEBIAN_VERSION "10") (eq .DEBIAN_VERSION "11") (eq .DEBIAN_VERSION "12")}}
            binutils-multiarch \
            binutils-multiarch-dev \
            python3-venv \
            python3-pip \
            python3 \
{{- end }}
        && rm -rf /var/lib/apt/lists/*

{{- if eq .DEBIAN_VERSION "10"}}
RUN ln -s /usr/bin/pip3 /usr/bin/pip
{{- end }}

<<<<<<< HEAD
ARG GOLANG_VERSION=1.23.10
{{- if eq .FIPS "true"}}
ARG GOLANG_DOWNLOAD_URL=https://aka.ms/golang/release/latest/go$GOLANG_VERSION-1.linux-amd64.tar.gz
=======
ARG VERSION
{{- if eq .FIPS "true"}}
ARG SECURITY_VERSION=-1
ARG GOLANG_DOWNLOAD_URL=https://aka.ms/golang/release/latest/go$VERSION$SECURITY_VERSION.linux-amd64.tar.gz
>>>>>>> 416d57c (validate installed golang version and honour VERSION build-args (#625))
# Use a different arg name for microsoft/go sha so it can be handled seperately from the regular golang sha
ARG MSFT_DOWNLOAD_SHA256=c4ee22c0de9fd2ff2c0d0d1a446e5aac75c9e3a3bfdc16e25e32d2461c5347ed
ARG DOWNLOAD_SHA256=$MSFT_DOWNLOAD_SHA256
{{- else}}
<<<<<<< HEAD
ARG GOLANG_DOWNLOAD_URL=https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
ARG GOLANG_DOWNLOAD_SHA256=535f9f81802499f2a7dbfa70abb8fda3793725fcc29460f719815f6e10b5fd60
=======
ARG GOLANG_DOWNLOAD_URL=https://golang.org/dl/go$VERSION.linux-amd64.tar.gz
ARG GOLANG_DOWNLOAD_SHA256=77e5da33bb72aeaef1ba4418b6fe511bc4d041873cbf82e5aa6318740df98717
>>>>>>> 416d57c (validate installed golang version and honour VERSION build-args (#625))
ARG DOWNLOAD_SHA256=$GOLANG_DOWNLOAD_SHA256
{{- end }}

RUN curl -fsSL "$GOLANG_DOWNLOAD_URL" -o golang.tar.gz \
	&& echo "$DOWNLOAD_SHA256  golang.tar.gz" | sha256sum -c - \
	&& rm -rf /usr/local/go \
	&& tar -C /usr/local -xzf golang.tar.gz \
	&& rm golang.tar.gz

ENV GOPATH /go
ENV PATH $PATH:/usr/local/go/bin

RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
WORKDIR $GOPATH

# Validate the Go installation
RUN go version \
    && go version | grep "go${VERSION}" || (echo "Go version mismatch: expected to contain go${VERSION}" && exit 1)

COPY rootfs /

# show the GLIBC version
RUN ldd --version

WORKDIR /
RUN mkdir -p /root/.config/go/telemetry && echo "off 2024-08-23" > /root/.config/go/telemetry/mode
ENV GOTOOLCHAIN=local
RUN go mod init github.com/elastic/golang-crossbuild-$VERSION \
    && go get . \
    && go env \
    && echo "toolcompile=$(go tool compile -V)" \
    && CGO_ENABLED=0 GOARCH=amd64 go build -o /crossbuild /entrypoint.go \
    && rm -rf /go/* /root/.cache/* /entrypoint.go

COPY sdks/libpcap-1.8.1.tar.gz .
RUN mkdir /libpcap \
    && tar -xzf libpcap-1.8.1.tar.gz -C /libpcap \
    && rm libpcap-1.8.1.tar.gz


{{- if eq .FIPS "true"}}
ENV GOEXPERIMENT systemcrypto
ENV CGO_ENABLED 1
{{- end}}
ENV GOLANG_CROSSBUILD=1
VOLUME      /app
WORKDIR     /app
ENTRYPOINT  ["/crossbuild"]
