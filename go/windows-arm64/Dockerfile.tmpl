ARG REPOSITORY
ARG VERSION
ARG TAG_EXTENSION=''

FROM golang:${VERSION}-trixie AS golang-builder

FROM ${REPOSITORY}/golang-crossbuild:${VERSION}-base-arm${TAG_EXTENSION}


ARG LLVM_MINGW64_VER=20250826
ARG LLVM_MINGW_UBUNTU_REL='22.04'
ARG LLVM_MINGW64_SRC="https://github.com/mstorsjo/llvm-mingw/releases/download"
ENV LLVM_MINGW64_VER="${LLVM_MINGW64_VER}"
ENV LLVM_MINGW64_SRC="$LLVM_MINGW64_SRC"

{{- if ne .DEBIAN_VERSION "12"}}
RUN echo "This Docker image will work only with Debian >12" && exit 1
{{- end }}

RUN \
    apt-get -o Acquire::Check-Valid-Until=false update \
    && apt-get install -qq -y --no-install-recommends --allow-unauthenticated \
        cmake \
        patch \
        libssl-dev \
        libxml2-dev \
        lzma-dev \
        uuid-dev \
        make \
        mingw-w64 \
        bash \
        wget \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /tmp
COPY --chmod=0755 scripts/setup-llvm-mingw64.sh /tmp/
RUN /tmp/setup-llvm-mingw64.sh

COPY rootfs /

COPY --from=golang-builder /tmp/llvm-mingw64 /tmp/llvm-mingw64

COPY --chmod=0755 scripts/install-llvm-mingw64.sh /tmp/install-llvm-mingw64.sh
RUN /tmp/install-llvm-mingw64.sh /tmp/llvm-mingw64 && rm -rf /tmp/*

# Basic test
RUN cd / \
  && aarch64-w64-mingw32-gcc helloWorld.c -o helloWorld.arm64 \
  && file helloWorld.arm64 \
  && file helloWorld.arm64 | grep -c 'Mach-O 64-bit arm64'

RUN cd / \
  && aarch64-w64-mingw32uwp-gcc helloWorld.c -o helloWorld.arm64e \
  && file helloWorld.arm64e \
  && file helloWorld.arm64e | grep -c 'Mach-O 64-bit arm64'

# Build-time metadata as defined at http://label-schema.org.
ARG BUILD_DATE
ARG IMAGE
ARG VCS_REF
ARG VCS_URL
LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name=$IMAGE \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url=$VCS_URL \
      org.label-schema.schema-version="1.0"
