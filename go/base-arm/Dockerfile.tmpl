ARG DEBIAN_VERSION
FROM arm64v8/debian:${DEBIAN_VERSION}

ARG DEBIAN_VERSION
# Replace sources.list in order to use archive.debian.org.
COPY sources-debian${DEBIAN_VERSION}.list /etc/apt/sources.list

RUN \
    apt-get -o Acquire::Check-Valid-Until=false update \
        && apt-get dist-upgrade -y \
        && apt-get install -qq -y --no-install-recommends --allow-unauthenticated \
            build-essential \
            ca-certificates \
            curl \
            git \
            gnupg \
            make \
            file \
            flex \
            bison \
            librpm-dev \
            libc-dev \
            libpopt-dev \
            linux-libc-dev \
            libxml2-dev \
            libxml2 \
            libicu-dev \
            icu-devtools \
            libsystemd-dev \
            {{- if (ne .DEBIAN_VERSION "11") }}
            libicu57 \
            librpm3  \
            librpmio3 \
            librpmbuild3 \
            librpmsign3 \
            {{- end }}
            libsqlite3-dev \
            libnss3 \
            libsqlite3-0 \
        && rm -rf /var/lib/apt/lists/*

ARG GOLANG_VERSION=1.24.0
{{- if eq .FIPS "true"}}
ARG GOLANG_DOWNLOAD_URL=https://aka.ms/golang/release/latest/go$GOLANG_VERSION-1.linux-arm64.tar.gz
# Use a different arg name for microsoft/go sha so it can be handled seperately from the regular golang sha
ARG MSFT_DOWNLOAD_SHA256=5c58f2a182d9cf9d48e3fb1cc81136980ca9a5b17b0a8e2ea95844fc72408154
ARG DOWNLOAD_SHA256=$MSFT_DOWNLOAD_SHA256
{{- else}}
ARG GOLANG_DOWNLOAD_URL=https://golang.org/dl/go$GOLANG_VERSION.linux-arm64.tar.gz
ARG GOLANG_DOWNLOAD_SHA256=c3fa6d16ffa261091a5617145553c71d21435ce547e44cc6dfb7470865527cc7
ARG DOWNLOAD_SHA256=$GOLANG_DOWNLOAD_SHA256
{{- end}}

RUN curl -fsSL "$GOLANG_DOWNLOAD_URL" -o golang.tar.gz \
	&& echo "$DOWNLOAD_SHA256  golang.tar.gz" | sha256sum -c - \
	&& rm -rf /usr/local/go \
	&& tar -C /usr/local -xzf golang.tar.gz \
	&& rm golang.tar.gz

ENV GOPATH /go
ENV PATH $PATH:/usr/local/go/bin

RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
WORKDIR $GOPATH

COPY rootfs /

# show the GLIBC version
RUN ldd --version

WORKDIR /

RUN mkdir -p /root/.config/go/telemetry && echo "off 2024-08-23" > /root/.config/go/telemetry/mode
ENV GOTOOLCHAIN local
RUN go mod init github.com/elastic/golang-crossbuild-$GOLANG_VERSION-arm \
    && go get . \
    && go env \
    && echo "toolcompile=$(go tool compile -V)" \
    && CGO_ENABLED=0 GOARCH=arm64 go build -o /crossbuild /entrypoint.go \
    && rm -rf /go/* /root/.cache/* /entrypoint.go

COPY sdks/libpcap-1.8.1.tar.gz . 
RUN mkdir /libpcap \
  && tar -xzf libpcap-1.8.1.tar.gz -C /libpcap \
  && cd /libpcap/libpcap-1.8.1 \
  && ./configure --enable-usb=no --enable-bluetooth=no --enable-dbus=no --host=aarch64-unknown-linux-gnu --with-pcap=linux \
  && make

{{- if eq .FIPS "true"}}
ENV GOEXPERIMENT systemcrypto
ENV CGO_ENABLED 1
{{- end}}
ENV GOLANG_CROSSBUILD=1
VOLUME      /app
WORKDIR     /app
ENTRYPOINT  ["/crossbuild"]
