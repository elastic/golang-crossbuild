# yaml-language-server: $schema=https://raw.githubusercontent.com/buildkite/pipeline-schema/main/schema.json

env:
  SETUP_GVM_VERSION: "v0.5.1"
  IMAGE_UBUNTU_X86_64: "family/platform-ingest-beats-ubuntu-2204"
  INSTANCE_TYPE_X86_64: "n2-standard-4"
  IMAGE_UBUNTU_ARM_64: "core-ubuntu-2004-aarch64"
  STAGING_IMAGE: "docker.elastic.co/observability-ci"
  BUILDX: 1

# This section is used to define the plugins that will be used in the pipeline.
# See https://buildkite.com/docs/pipelines/integrations/plugins/using#using-yaml-anchors-with-plugins
common:
  - oblt_google_auth_plugin: &gcp_oidc_plugin
      # See https://github.com/elastic/oblt-infra/blob/main/conf/resources/repos/golang-crossbuild/01-gcp-buildkite-oidc.tf
      # This plugin authenticates to Google Cloud using the OIDC token.
      elastic/oblt-google-auth#v1.3.0:
        lifetime: 10800 # seconds
        project-id: "elastic-observability-ci"
        project-number: "911195782929"
  - docker_elastic_login_plugin: &docker_elastic_login_plugin
      elastic/vault-docker-login#v0.5.2:
        secret_path: 'kv/ci-shared/platform-ingest/elastic_docker_registry'

steps:

  - group: "FPM"
    key: "fpm"

    steps:
      - label: "Trigger fpm-pipeline"
        if: build.pull_request.id != null && build.env("BUILDKITE_PULL_REQUEST_BASE_BRANCH") == "main"
        plugins:
          - monorepo-diff#v1.0.1:
              diff: "git diff --name-only origin/${GITHUB_PR_TARGET_BRANCH}...HEAD"
              interpolation: false
              watch:
                - path:
                    - .buildkite/pipeline.yml
                    - .buildkite/fpm-pipeline.yml
                    - .buildkite/scripts/llvm-fpm
                    - fpm/**
                  config:
                    label: ":pipeline: Upload FPM Pipeline"
                    command: "buildkite-agent pipeline upload .buildkite/fpm-pipeline.yml"
                    env:
                      - BUILDKITE_PULL_REQUEST=${BUILDKITE_PULL_REQUEST}
                      - BUILDKITE_PULL_REQUEST_BASE_BRANCH=${BUILDKITE_PULL_REQUEST_BASE_BRANCH}
                      - GITHUB_PR_LABELS=${GITHUB_PR_LABELS}

      # Trigger for the main branch only
      - label: ":pipeline: Upload FPM Pipeline"
        if: build.branch == 'main'
        command: "buildkite-agent pipeline upload .buildkite/fpm-pipeline.yml"
        env:
          - BUILDKITE_PULL_REQUEST=${BUILDKITE_PULL_REQUEST}
          - BUILDKITE_PULL_REQUEST_BASE_BRANCH=${BUILDKITE_PULL_REQUEST_BASE_BRANCH}
          - GITHUB_PR_LABELS=${GITHUB_PR_LABELS}

  - group: "llvm-apple"
    key: "llvm-apple"

    steps:
      - label: "Trigger llvm-apple-pipeline"
        if: build.pull_request.id != null && build.env("BUILDKITE_PULL_REQUEST_BASE_BRANCH") == "main"
        plugins:
          - monorepo-diff#v1.0.1:
              diff: "git diff --name-only origin/${GITHUB_PR_TARGET_BRANCH}...HEAD"
              interpolation: false
              watch:
                - path:
                    # As long as https://github.com/elastic/golang-crossbuild/issues/615
                    #- .buildkite/pipeline.yml
                    - .buildkite/llvm-apple-pipeline.yml
                    - .buildkite/scripts/llvm-apple
                    - go/llvm-apple/**
                  config:
                    label: ":pipeline: Upload FPM Pipeline"
                    command: "buildkite-agent pipeline upload .buildkite/llvm-apple-pipeline.yml"
                    env:
                      - BUILDKITE_PULL_REQUEST=${BUILDKITE_PULL_REQUEST}
                      - BUILDKITE_PULL_REQUEST_BASE_BRANCH=${BUILDKITE_PULL_REQUEST_BASE_BRANCH}
                      - GITHUB_PR_LABELS=${GITHUB_PR_LABELS}

      # Trigger for the main branch only
      - label: ":pipeline: Upload llvm-apple Pipeline"
        if: build.branch == 'main'
        command: "buildkite-agent pipeline upload .buildkite/llvm-apple-pipeline.yml"
        env:
          - BUILDKITE_PULL_REQUEST=${BUILDKITE_PULL_REQUEST}
          - BUILDKITE_PULL_REQUEST_BASE_BRANCH=${BUILDKITE_PULL_REQUEST_BASE_BRANCH}
          - GITHUB_PR_LABELS=${GITHUB_PR_LABELS}

  - group: "Staging"
    key: "staging"

    steps:
      - label: ":linux: Staging / Ubuntu X86_64 - {{matrix.makefile}} - fips: {{matrix.fips}}"
        key: "build-ubuntu-x86"
        command:
          - ".buildkite/scripts/build.sh {{matrix.makefile}}"
          - ".buildkite/scripts/publish.sh {{matrix.makefile}}"
        env:
          REPOSITORY: "${STAGING_IMAGE}"
          FIPS: "{{matrix.fips}}"
        if: build.env("BUILDKITE_PULL_REQUEST") != "false"
        notify:
          - github_commit_status:
              context: "Staging / Ubuntu X86_64"
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          instanceType: "${INSTANCE_TYPE_X86_64}"
        plugins:
          - *gcp_oidc_plugin
          - *docker_elastic_login_plugin
        retry:
          automatic:
            limit: 1
        matrix:
          setup:
            makefile:
              - "Makefile"
              - "Makefile.debian7"
              - "Makefile.debian8"
              - "Makefile.debian9"
              - "Makefile.debian10"
              - "Makefile.debian11"
              - "Makefile.debian12"
            fips:
              - "false"
              - "true"

      - label: ":linux: Staging / Ubuntu ARM - {{matrix.makefile}} - fips: {{matrix.fips}}"
        key: "build-ubuntu-arm"
        command:
          - ".buildkite/scripts/build.sh {{matrix.makefile}}"
          - ".buildkite/scripts/publish.sh {{matrix.makefile}}"
        env:
          REPOSITORY: "${STAGING_IMAGE}"
          FIPS: "{{matrix.fips}}"
        if: build.env("BUILDKITE_PULL_REQUEST") != "false"
        notify:
          - github_commit_status:
              context: "Staging / Ubuntu ARM"
        agents:
          provider: "aws"
          imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
          instanceType: "t4g.large"
        plugins:
          - *gcp_oidc_plugin
          - *docker_elastic_login_plugin
        retry:
          automatic:
            limit: 1
        matrix:
          setup:
            makefile:
              - "Makefile.debian8"
              - "Makefile.debian9"
              - "Makefile.debian10"
              - "Makefile.debian11"
              - "Makefile.debian12"
            fips:
              - "false"
              - "true"

  - group: "Release"
    key: "release"

    steps:
      - label: ":linux: Release / Ubuntu X86_64 - {{matrix.makefile}} - fips: {{matrix.fips}}"
        key: "release-ubuntu-x86"
        command:
          - ".buildkite/scripts/build.sh {{matrix.makefile}}"
          - ".buildkite/scripts/publish.sh {{matrix.makefile}}"
        env:
          FIPS: "{{matrix.fips}}"
        # Releases should only be for main for ^[0-9].[0-9] branches (therefore support for major.minor.patch.x too).
        if: build.branch == "main" || build.branch =~ /^[0-9]+\.[0-9]+/ || build.branch =~ /^[0-9]+\.[0-9]+\.[0-9]+\.x$$/
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          instanceType: "${INSTANCE_TYPE_X86_64}"
        plugins:
          - *gcp_oidc_plugin
          - *docker_elastic_login_plugin
        retry:
          automatic:
            limit: 1
        matrix:
          setup:
            makefile:
              - "Makefile"
              - "Makefile.debian7"
              - "Makefile.debian8"
              - "Makefile.debian9"
              - "Makefile.debian10"
              - "Makefile.debian11"
              - "Makefile.debian12"
            fips:
              - "false"
              - "true"
        notify:
          - github_commit_status:
              context: "Release / Ubuntu X86_64"

      - label: ":linux: Release / Ubuntu ARM - {{matrix.makefile}} - fips: {{matrix.fips}}"
        key: "release-ubuntu-arm"
        command:
          - ".buildkite/scripts/build.sh {{matrix.makefile}}"
          - ".buildkite/scripts/publish.sh {{matrix.makefile}}"
        env:
          FIPS: "{{matrix.fips}}"
        # Releases should only be for main for ^[0-9].[0-9] branches (therefore support for major.minor.patch.x too).
        if: build.branch == "main" || build.branch =~ /^[0-9]+\.[0-9]+$$/ || build.branch =~ /^[0-9]+\.[0-9]+\.[0-9]+\.x$$/
        agents:
          provider: "aws"
          imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
          instanceType: "t4g.large"
        plugins:
          - *gcp_oidc_plugin
          - *docker_elastic_login_plugin
        retry:
          automatic:
            limit: 1
        matrix:
          setup:
            makefile:
              - "Makefile.debian8"
              - "Makefile.debian9"
              - "Makefile.debian10"
              - "Makefile.debian11"
              - "Makefile.debian12"
            fips:
              - "false"
              - "true"
        notify:
          - github_commit_status:
              context: "Release / Ubuntu ARM"

      - label: "Post-Release"
        key: "release-post"
        command: ".buildkite/scripts/post-release.sh ${GOLANG_VERSION}"
        # Releases should only be for main for ^[0-9].[0-9]$ branches.
        if: build.branch == "main" || build.branch =~ /^[0-9]+\.[0-9]+$$/
        depends_on:
          - "release-ubuntu-x86"
          - "release-ubuntu-arm"
        notify:
          - github_commit_status:
              context: "Post-release"
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          instanceType: "${INSTANCE_TYPE_X86_64}"

# TODO: look for the right slack channel. Robots team don't own this project.
notify:
  - slack: "#observablt-bots"
    if: build.state == "failed"
